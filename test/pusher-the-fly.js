async function formatter(event, message) {
  /**
   * –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è.
   *
   * @param {string} event - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–Ω–∞–ª–µ Pusher.
   * - null: –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏.
   * @param {json} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Pusher.
   * @returns {object} formatted - –î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
   * @returns {string} formatted.id - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
   * @returns {array} [formatted.symbols] - –¢–∏–∫–µ—Ä—ã, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.
   * @returns {string} [formatted.iconLayout] - –í—ë—Ä—Å—Ç–∫–∞ –¥–ª—è –∏–∫–æ–Ω–∫–∏.
   * @returns {string} [formatted.iconFallback] - –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –∏–∫–æ–Ω–∫–∏ –Ω–µ—Ç.
   * @returns {string} [formatted.indicator] - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ —Å–ª–µ–≤–∞).
   * @returns {string} [formatted.leftTitle] - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–ª–µ–≤–∞).
   * @returns {string} [formatted.leftSubtitle] - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–ª–µ–≤–∞).
   * @returns {string} [formatted.rightTitle] - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–ø—Ä–∞–≤–∞).
   * @returns {string} [formatted.rightSubtitle] - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–ø—Ä–∞–≤–∞).
   */

  if (
    event &&
    event !==
      `[%#(await ppp.user.functions.findOne({collection:'services'},{removed:{$not:{$eq:true}},name:'The Fly SPBEX'},{_id:1}))?._id%]:insert`
  )
    return;

  let rightTitle = 'üêù';

  switch (message.topic) {
    case 'events':
      rightTitle = 'üìÖ';

      break;
    case 'recomm':
      rightTitle = 'üëçüëé';

      break;
    case 'recDowngrade':
      rightTitle = '‚¨áÔ∏è';

      break;
    case 'recUpgrade':
      rightTitle = '‚¨ÜÔ∏è';

      break;
    case 'periodicals':
      rightTitle = 'üì∞';

      break;
    case 'options':
      rightTitle = 'üÖæÔ∏è';

      break;
    case 'general_news':
      rightTitle = 'üåé';

      break;
    case 'hot_stocks':
      rightTitle = 'üî•';

      break;
    case 'earnings':
      rightTitle = 'üí∞';

      break;
    case 'syndic':
      break;
    case 'technical_analysis':
      rightTitle = 'üíπ';

      break;
  }

  const symbols = message.tickers?.split?.(',') ?? [];
  let instrument = this.instrument;

  if (!this.instrument && symbols.length === 1) {
    instrument = await this.instrumentTrader?.findInstrumentInCache?.(
      symbols[0]
    );
  }

  if (instrument && instrument.symbol.startsWith('$')) instrument = void 0;

  const { formatDateWithOptions } = await import(
    `${ppp.rootUrl}/shared/intl.js`
  );

  return {
    id: message.ppp_counter,
    iconLayout: `<div slot="icon" style="${
      instrument?.isin
        ? `background-image:url(${
            'static/instruments/' + instrument.isin + '.svg'
          })`
        : ''
    }"></div>`,
    iconFallback: `<span slot="icon-fallback">${
      instrument?.symbol?.[0] ?? 'üêù'
    }</span>`,
    symbols,
    leftTitle: `<span slot="title-left" title="${message.title}">${message.title}</span>`,
    leftSubtitle: `<div slot="subtitle-left" title="${symbols.join(
      ' '
    )}">${symbols.join('<span class="dot-divider">‚Ä¢</span>')}</div>`,
    rightTitle: `<span slot="title-right">${rightTitle}</span>`,
    rightSubtitle: `<span slot="subtitle-right">${formatDateWithOptions(
      new Date(
        Date.parse(
          message.date.replace('GMT-8', 'GMT-5').replace('GMT-7', 'GMT-4')
        )
      ),
      {
        month: 'numeric',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric'
      }
    )}</span>`
  };
}

async function history() {
  /**
   * –§—É–Ω–∫—Ü–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
   *
   */

  // const serviceCredentials = [%#JSON.stringify(await (async () => {
  //   const [service] = await ppp.user.functions.aggregate({collection:'services'}, [
  //     {
  //       $match: {
  //         name: 'The Fly SPBEX'
  //       }
  //     },
  //     {
  //       $lookup: {
  //         from: 'apis',
  //         localField: 'supabaseApiId',
  //         foreignField: '_id',
  //         as: 'supabaseApi'
  //       }
  //     },
  //     {
  //       $unwind: '$supabaseApi'
  //     }
  //   ]);
  //
  //   return {
  //     api: await ppp.decrypt(service.supabaseApi),
  //     tableName: `parsed_records_${service._id}`
  //   }
  // })())%];

  let symbolToFilter;

  if (this.instrument && this.instrumentTrader) {
    symbolToFilter = this.instrumentTrader.getSymbol(this.instrument);
  }

  const query = `select ppp_counter, title, tickers, topic, date, priority from ${
    serviceCredentials.tableName
  } ${
    symbolToFilter ? `where tickers ~* '\\y${symbolToFilter}\\y'` : ''
  } order by ppp_counter desc limit 10;`;

  const { hostname } = new URL(serviceCredentials.api.url);

  const [results] =
    (
      await (
        await fetch(
          new URL('pg', ppp.keyVault.getKey('service-machine-url')).toString(),
          {
            method: 'POST',
            body: JSON.stringify({
              query,
              connectionString: `postgres://${
                serviceCredentials.api.user
              }:${encodeURIComponent(
                serviceCredentials.api.password
              )}@db.${hostname}:${serviceCredentials.api.port}/${
                serviceCredentials.api.db
              }`
            })
          }
        )
      ).json()
    ).results ?? [];

  const fieldIndices = {};

  results.fields.forEach((f, index) => {
    fieldIndices[f.fieldName] = index;
  });

  return results.rows.map((r) => {
    return {
      ppp_counter: r[fieldIndices['ppp_counter']],
      title: r[fieldIndices['title']],
      tickers: r[fieldIndices['tickers']],
      topic: r[fieldIndices['topic']],
      date: r[fieldIndices['date']],
      priority: r[fieldIndices['priority']]
    };
  });
}
